version: 2.1

commands:
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_hadolint:
    description: Install Hadolint
    steps:
      - run:
          name: Install Hadolint
          command: |
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.10.0/hadolint-Linux-x86_64
            sudo chmod +x /bin/hadolint
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name "karaoke-backend-<< parameters.workflow_id >>"
            
jobs:
  test-backend:
    docker:
      - image: cimg/python:3.9.11
    steps:
      - checkout
      - run:
          name: install dependencies and migrate db
          command: |
            # python -m venv .venv
            # source .venv/bin/activate
            python -m pip install -r requirements.txt
            cd karaoke_lyric
            python manage.py makemigrations
            python manage.py migrate
            python manage.py test --verbosity=2
      - save_cache:
          paths: [~/project/karaoke_lyric]
          key: backend-build
                
  test-docker:
    docker:
      - image: cimg/python:3.9.11
    steps:
      - checkout
      - install_hadolint
      - run:
          name: Test backend
          command: |
            hadolint --ignore DL3013 --ignore DL3042 Dockerfile
  
  # Create EC2 using Cloudformation
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar gzip
          command: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags project=karaoke-${CIRCLE_WORKFLOW_ID:0:7} \
            --stack-name "karaoke-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:aws:cloudformation:stack-name,Values=karaoke-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  # install Docker, Kubernetes
  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["c0:61:13:7f:d8:f6:78:3d:90:29:40:a1:79:ac:84:7e"]
      - run:
          name: Configure server
          command: |            
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      # - destroy-environment 

  # Copy source code from root folder to ansible & build docker in EC2
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: ["c0:61:13:7f:d8:f6:78:3d:90:29:40:a1:79:ac:84:7e"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files

            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: circleci/node:13.8.0 #python:3.7-alpine3.16
    steps:
      - checkout
      - install_awscli
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL=http://${BACKEND_PUBLIC_IP}:3030
            echo $API_URL
            curl -s "$API_URL/api/status" -v
            if curl -s $API_URL/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations
            
workflows:
  Karaoke_Lyric:
    jobs:
      - test-backend
      - test-docker
      - deploy-infrastructure:
          requires: [test-backend, test-docker]
      - configure-infrastructure:
          requires: [deploy-infrastructure]